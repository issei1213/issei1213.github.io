<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TechBlog</title><link>https://issei1213.github.io/</link><description>Recent content on TechBlog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 15 Apr 2022 00:14:16 +0900</lastBuildDate><atom:link href="https://issei1213.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScript Tip #8</title><link>https://issei1213.github.io/posts/typescript_tip-8/</link><pubDate>Fri, 15 Apr 2022 00:14:16 +0900</pubDate><guid>https://issei1213.github.io/posts/typescript_tip-8/</guid><description>背景 今回もmattさんのTypeScriptTipsをまとめていく。
TypeScript Tip #8
概要 Reactのジェネリクスを使用して、動的で柔軟なコンポーネントを作成することができる。
本題 以下のコードはReactのサンプルのコードである。
Tableコンポーネントのpropsに存在するitemsはオブジェクトの配列になっている。
オブジェクトはプロパティidのみを保持している。
import React from &amp;#39;react&amp;#39; interface TableProps { items: { id: string }[] renderItem: (item: { id: string }) =&amp;gt; React.ReactNode } export const Table = (props: TableProps) =&amp;gt; { return null } const Component = () =&amp;gt; { return ( &amp;lt;Table items={[ { id: &amp;#39;1&amp;#39;, } ]} renderItem={(item) =&amp;gt; &amp;lt;div&amp;gt;{ item.id }&amp;lt;/div&amp;gt;} &amp;gt;&amp;lt;/Table&amp;gt; ) } 上記の場合、propsitemsにオブジェクトのid以外のプロパティを定義したい場合、TablePropsにも追加をしてやる必要がある。 以下はそのサンプルコード</description></item><item><title>TypeScript Tip #7</title><link>https://issei1213.github.io/posts/typescript_tip-7/</link><pubDate>Wed, 13 Apr 2022 23:11:35 +0900</pubDate><guid>https://issei1213.github.io/posts/typescript_tip-7/</guid><description>背景 今回もmattさんの記事をまとめていく。
TypeScript Tip #7
概要 オブジェクト中身を順番に処理していく時には、以下のコードを用いることがある。
const myObject = { a: 1, b: 2, c: 3 } Object.keys(myObject).forEach((key) =&amp;gt; { console.log(myObject[key]) // Element implicitly has an &amp;#39;any&amp;#39; type because expression of type &amp;#39;string&amp;#39; can&amp;#39;t be used to index type &amp;#39;{ a: number; b: number; c: number; }&amp;#39;. // No index signature with a parameter of type &amp;#39;string&amp;#39; was found on type &amp;#39;{ a: number; b: number; c: number; }&amp;#39;.</description></item><item><title>TypeScript Tip #5</title><link>https://issei1213.github.io/posts/typescript_tip-5/</link><pubDate>Sun, 10 Apr 2022 12:43:14 +0900</pubDate><guid>https://issei1213.github.io/posts/typescript_tip-5/</guid><description>背景 今回もmattさんの動画をまとめていく
TypeScript Tip #5
概要 型推論された型に対してextendsを使用するまとめていく。
本題 実際のサンプルコードは以下。 getDeepValue関数の引数にオブジェクトを渡して、そこから型推論をさせている。
第2引数、第3引数のオブジェクトのキーを指定して、最終的なバリューを取得できるような関数を作成する。
export const getDeepValue = &amp;lt; Obj, FirstKey extends keyof Obj, SecondKey extends keyof Obj[FirstKey] &amp;gt;( obj: Obj, firstKey: FirstKey, secondKey: SecondKey ): Obj[FirstKey][SecondKey] =&amp;gt; { return obj[firstKey][secondKey] } const obj = { foo: { a: true, b: 2 }, bar: { c: &amp;#39;cool&amp;#39;, d: 2 } } console.log(getDeepValue(obj, &amp;#39;bar&amp;#39;, &amp;#39;d&amp;#39;)) 引数の第2引数FirstKeyは型推論されたObjに制約を設けている。 FirstKey extends keyof { foo: { a: boolean; b: number; }; bar: { c: string; d: number; }; } 🔽 FirstKey extends &amp;#34;foo&amp;#34; | &amp;#34;bar&amp;#34; よって、FirstKeyはfooかbarのどちらかになる。</description></item><item><title>TypeScript Tip #3</title><link>https://issei1213.github.io/posts/typescript_tip-3/</link><pubDate>Sat, 09 Apr 2022 01:13:25 +0900</pubDate><guid>https://issei1213.github.io/posts/typescript_tip-3/</guid><description>背景 今回もmattoさんのコードリーディングをしていく。
TypeScript Tip #3
概要 今回はTypeScriptのユーティリティをまとめたライブラリts-toolbeltについて説明していく。
注意点としては、TypeScriptバージョンが4.1以上である必要がある。 数多くのユーティリティが提供されているため、今回はMattさんの解説に絞ってまとめていく。
ts-toolbelt
本題 使い方 ライブラリの中から使用したいユーティリティをimportして使用する。
import { String, Union } from &amp;#39;ts-toolbelt&amp;#39;; 今回はURLの操作をする時に便利なユーティリティをまとめていく。
サンプルコード import { String, Union } from &amp;#39;ts-toolbelt&amp;#39;; const query = &amp;#39;/home?a=foo&amp;amp;b=wow&amp;#39; type Query = typeof query // type Query = &amp;#34;/home?a=foo&amp;amp;b=wow&amp;#34; type SecondQueryPart = String.Split&amp;lt;Query, &amp;#39;?&amp;#39;&amp;gt;[1] // type SecondQueryPart = &amp;#34;a=foo&amp;amp;b=wow&amp;#34; type QueryElements = String.Split&amp;lt;SecondQueryPart, &amp;#39;&amp;amp;&amp;#39;&amp;gt; // type QueryElements = [&amp;#34;a=foo&amp;#34;, &amp;#34;b=wow&amp;#34;] type QueryParams = { [ QueryElement in QueryElements[number] ]: { [ key in String.</description></item><item><title>TypeScript Tip #2</title><link>https://issei1213.github.io/posts/typescript_tip-2/</link><pubDate>Fri, 08 Apr 2022 20:26:20 +0900</pubDate><guid>https://issei1213.github.io/posts/typescript_tip-2/</guid><description>背景 今回もmattoさんのTypeScriptの動画をまとめていく
概要 下記の様なEntityの型を定義する。
type Entity = | { type: &amp;#39;user&amp;#39; } | { type: &amp;#39;post&amp;#39; } | { type: &amp;#39;comment&amp;#39; } 上記の型の各オブジェクトにidを追加したい。その時のコードは以下になる。
typeに応じたidのプロパティを追加している。
type EntityWithId = | { type: &amp;#39;user&amp;#39; userId: string } | { type: &amp;#39;post&amp;#39; postId: string } | { type: &amp;#39;comment&amp;#39; commentId: string } const result1: EntityWithId = { type: &amp;#39;post&amp;#39;, postId: &amp;#39;123&amp;#39; } const result2: EntityWithId = { type: &amp;#39;user&amp;#39;, userId: &amp;#39;123&amp;#39; } 今回はEntityWithIdの部分をインデックスシグネチャを利用して作成していく。
本題 実際のコードは以下になる。細かくみていく。</description></item><item><title>TypeScript Tip #1</title><link>https://issei1213.github.io/posts/typescript_tip-1/</link><pubDate>Thu, 07 Apr 2022 12:43:39 +0900</pubDate><guid>https://issei1213.github.io/posts/typescript_tip-1/</guid><description>背景 前回のmattさんのTypeScript Tip #15が勉強になったので、最初から#1からまとめていく
概要 export const fruitCounts = { apple: 1, pear: 4, banana: 26 } 上記の様なコードがあった時に、特定のキーを取得する型エイリアスで定義すると以下になる。
type SingleFruitCount = | { apple: number } | { banana: number } | { pear: number } const singleFruitCount: SingleFruitCount = { apple: 10, } SingleFruitCountの型エイリアスを作成すれば、型定義できるが定数fruitCountsを型推論させて型エイリアスを作成する。
本題 最終的なコードは以下になる。具体的に解説していく。
type FruitCounts = typeof fruitCounts type NewSingleFruitCount = { [ K in keyof FruitCounts ]: { [ K2 in K ]: number } }[keyof FruitCounts] // type NewSingleFruitCount = { // apple: number; // } | { // pear: number; // } | { // banana: number; // } typeof fruitCountsは型推論が効いて以下の型が作成される。 type FruitCounts = { apple: number; pear: number; banana: number; } [ K in keyof FruitCounts ]のkeyof FruitCountsは型エイリアスのオブジェクトのキーのみを取得することができる。</description></item><item><title>りあクトのTypeScriptサンプルコードリーディング</title><link>https://issei1213.github.io/posts/typescript_react-sample-code-reading/</link><pubDate>Sat, 02 Apr 2022 13:39:20 +0900</pubDate><guid>https://issei1213.github.io/posts/typescript_react-sample-code-reading/</guid><description>背景 TypeScriptの教材で以下のサンプルコードがあったので、コードリーディングしていく。
概要 以下のコードリーディングをしていく。
非同期データ取得関数をラップして、そこで起きる例外をフォローしつつ正常系と異常系に振り分ける関数を定義している。
type Result&amp;lt;T, E extends Error&amp;gt; = Ok&amp;lt;T, E&amp;gt; | Err&amp;lt;T, E&amp;gt; export class Ok&amp;lt;T, E extends Error&amp;gt; { constructor(readonly val: T) {} isOk = (): this is Ok&amp;lt;T, E&amp;gt; =&amp;gt; true isErr = (): this is Err&amp;lt;T, E&amp;gt; =&amp;gt; false } export class Err&amp;lt;T, E extends Error&amp;gt; { constructor(readonly err: E) {} isOk = (): this is Ok&amp;lt;T, E&amp;gt; =&amp;gt; false isErr = (): this is Err&amp;lt;T, E&amp;gt; =&amp;gt; true } export const withResult = &amp;lt;T, A extends any[], E extends Error&amp;gt;(fn: (.</description></item><item><title>TypeScript Tip #15</title><link>https://issei1213.github.io/posts/typescript_tip-15/</link><pubDate>Fri, 01 Apr 2022 23:23:48 +0900</pubDate><guid>https://issei1213.github.io/posts/typescript_tip-15/</guid><description>背景 Twitterを眺めていると汎用性が高そうな関数を作成できるTypeScriptのツイートがあったので、整理するためにまとめる。
TypeScript Tip #15 概要 関数の引数のタイプをみて、タイプに応じてpayloadが必要か必要がないかをTypeScriptで判断する。
// 第一引数がSIGN_OUTの場合は、payloadはなし sendEvent(&amp;#39;SIGN_OUT&amp;#39;) // 第一引数がLOG_INの場合は、payloadは必須 sendEvent(&amp;#34;LOG_IN&amp;#34;, { userId: &amp;#39;123&amp;#39; }) 成功パターン
sendEvent(&amp;#39;SIGN_OUT&amp;#39;) sendEvent(&amp;#34;LOG_IN&amp;#34;, { userId: &amp;#39;123&amp;#39; }) 失敗パターン(コンパイルエラー)
sendEvent(&amp;#39;SIGN_OUT&amp;#39;, {}) sendEvent(&amp;#39;LOG_IN&amp;#39;, { userId: 122 }) sendEvent(&amp;#39;LOG_IN&amp;#39;, {}) sendEvent(&amp;#39;LOG_IN&amp;#39;) 本題 以下のコードで実現可能
type AuthEvent = | { type: &amp;#39;LOG_IN&amp;#39; payload: { userId: string } } | { type: &amp;#39;SIGN_OUT&amp;#39; } const sendEvent = &amp;lt;Type extends AuthEvent[&amp;#39;type&amp;#39;]&amp;gt;( ...args: Extract&amp;lt;AuthEvent, { type: Type }&amp;gt; extends { payload: infer TPayload } ?</description></item><item><title>refとreactive</title><link>https://issei1213.github.io/posts/vue_ref_vs_reactive/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0900</pubDate><guid>https://issei1213.github.io/posts/vue_ref_vs_reactive/</guid><description>背景 refとreactiveの使い分けがパッとでてこなかったことがあったのでまとめていく。
概要 どの状況で使い分ければいいのか refとreactiveの違い 本題 1.どの状況で使い分ければいいのか refはプリミティブ型に対して使用する。 reactiveはオブジェクト型に対して使用する。
2.refとreactiveの違い ref const boolean = ref(false) // export function ref&amp;lt;boolean&amp;gt;(value: boolean): Ref&amp;lt;boolean&amp;gt; TypeScriptの場合は、引数(初期値)を型推論してくれる。 明示的にしたい型注釈したい場合は、ref&amp;lt;boolean | null&amp;gt;(false)と使用することもできる。 基本的になんでも(オブジェクト、配列、プリミティブ)refで使用ができる。 引数の値がオブジェクトの場合は、Vue内部でreactiveに更新している。更新している負荷を与えてしまうため、オブジェクトの場合は、reactiveを使用したほうがいいと言われている。 ref.valueでデータを格納する Ex)boolean.value = true reactive const user = reactive({ firstName: &amp;#39;太郎&amp;#39;, lastName: &amp;#39;山田&amp;#39;, height: 160, weight: 50 }) // const user: {firstName: string, lastName: string, height: number, weight: number} TypeScriptの場合は、引数(初期値)を型推論してくれる。 型注釈をつけたい場合は、ジェネクリスを使用できる const user = reactive&amp;lt;{ firstName?: string lastName?</description></item><item><title>watchとwatchEffect</title><link>https://issei1213.github.io/posts/vue_watch-and-watcheffect/</link><pubDate>Fri, 18 Mar 2022 10:36:36 +0900</pubDate><guid>https://issei1213.github.io/posts/vue_watch-and-watcheffect/</guid><description>背景 Vue.jsを使用する際にwatchを使う頻度はそこまで多くなく、使う度にドキュメントを確認するので、記事にまとめておく。
概要 Vue3のwatchとwatchEffectの仕様をまとめていく。また、それぞれの違いもまとめる。
本題 watch 説明 指定したデータを監視して、変化があればコールバック関数が実行する。
使い方 単一のデータ監視と複数のデータ監視の2種類の使い方が存在する。
1. 単一のデータを監視する場合 const count = ref(0) // 第一引数に監視したいデータを記載する watch(count, (newCount, prevCount) =&amp;gt; { /* ... */ }) const state = reactive({ count: 0 }) // 第一引数に監視したいデータをコールバック関数で記載する watch(() =&amp;gt; state.count, (newCount, prevCount) =&amp;gt; { /* ... */ } ) 2. 複数のデータを監視する場合 配列を使用することで、複数のデータを監視できる 複数の監視データが同時に変更する時には、コールバック関数は一度して動かないため注意 const firstName = ref(&amp;#39;&amp;#39;) const lastName = ref(&amp;#39;&amp;#39;) // 第一引数を配列にしている watch([firstName, lastName], (newValues, prevValues) =&amp;gt; { console.</description></item></channel></rss>