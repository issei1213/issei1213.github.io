<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on TechBlog(仮)</title><link>http://example.org/posts/</link><description>Recent content in Posts on TechBlog(仮)</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 18 Mar 2022 10:36:36 +0900</lastBuildDate><atom:link href="http://example.org/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>watchとwatchEffect</title><link>http://example.org/posts/vue_watch-and-watcheffect/</link><pubDate>Fri, 18 Mar 2022 10:36:36 +0900</pubDate><guid>http://example.org/posts/vue_watch-and-watcheffect/</guid><description>背景 Vue.jsを使用する際にwatchを使う頻度はそこまで多くなく、使う度にドキュメントを確認するので、記事にまとめておく。
概要 Vue3のwatchとwatchEffectの仕様をまとめていく。また、それぞれの違いもまとめる。
本題 watch 説明 指定したデータを監視して、変化があればコールバック関数が実行する。
使い方 単一のデータ監視と複数のデータ監視の2種類の使い方が存在する。
1. 単一のデータを監視する場合 const count = ref(0) // 第一引数に監視したいデータを記載する watch(count, (newCount, prevCount) =&amp;gt; { /* ... */ }) const state = reactive({ count: 0 }) // 第一引数に監視したいデータをコールバック関数で記載する watch(() =&amp;gt; state.count, (newCount, prevCount) =&amp;gt; { /* ... */ } ) 2. 複数のデータを監視する場合 配列を使用することで、複数のデータを監視できる 複数の監視データが同時に変更する時には、コールバック関数は一度して動かないため注意 const firstName = ref(&amp;#39;&amp;#39;) const lastName = ref(&amp;#39;&amp;#39;) // 第一引数を配列にしている watch([firstName, lastName], (newValues, prevValues) =&amp;gt; { console.</description></item></channel></rss>