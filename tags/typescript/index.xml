<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>TypeScript on TechBlog</title><link>https://issei1213.github.io/tags/typescript/</link><description>Recent content in TypeScript on TechBlog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Sat, 02 Apr 2022 13:39:20 +0900</lastBuildDate><atom:link href="https://issei1213.github.io/tags/typescript/index.xml" rel="self" type="application/rss+xml"/><item><title>TypeScript Tip #2</title><link>https://issei1213.github.io/posts/typescript_tip-2/</link><pubDate>Sat, 02 Apr 2022 13:39:20 +0900</pubDate><guid>https://issei1213.github.io/posts/typescript_tip-2/</guid><description>背景 TypeScriptの教材で以下のサンプルコードがあったので、コードリーディングしていく。
概要 以下のコードリーディングをしていく。
非同期データ取得関数をラップして、そこで起きる例外をフォローしつつ正常系と異常系に振り分ける関数を定義している。
type Result&amp;lt;T, E extends Error&amp;gt; = Ok&amp;lt;T, E&amp;gt; | Err&amp;lt;T, E&amp;gt; export class Ok&amp;lt;T, E extends Error&amp;gt; { constructor(readonly val: T) {} isOk = (): this is Ok&amp;lt;T, E&amp;gt; =&amp;gt; true isErr = (): this is Err&amp;lt;T, E&amp;gt; =&amp;gt; false } export class Err&amp;lt;T, E extends Error&amp;gt; { constructor(readonly err: E) {} isOk = (): this is Ok&amp;lt;T, E&amp;gt; =&amp;gt; false isErr = (): this is Err&amp;lt;T, E&amp;gt; =&amp;gt; true } export const withResult = &amp;lt;T, A extends any[], E extends Error&amp;gt;(fn: (.</description></item><item><title>TypeScript Tip #1</title><link>https://issei1213.github.io/posts/typescript_tip-1/</link><pubDate>Fri, 01 Apr 2022 23:23:48 +0900</pubDate><guid>https://issei1213.github.io/posts/typescript_tip-1/</guid><description>背景 Twitterを眺めていると汎用性が高そうな関数を作成できるTypeScriptのツイートがあったので、整理するためにまとめる。
https://twitter.com/mpocock1/status/1509850662795989005
概要 関数の引数のタイプをみて、タイプに応じてpayloadが必要か必要がないかをTypeScriptで判断する。
// 第一引数がSIGN_OUTの場合は、payloadはなし sendEvent(&amp;#39;SIGN_OUT&amp;#39;) // 第一引数がLOG_INの場合は、payloadは必須 sendEvent(&amp;#34;LOG_IN&amp;#34;, { userId: &amp;#39;123&amp;#39; }) 成功パターン
sendEvent(&amp;#39;SIGN_OUT&amp;#39;) sendEvent(&amp;#34;LOG_IN&amp;#34;, { userId: &amp;#39;123&amp;#39; }) 失敗パターン(コンパイルエラー)
sendEvent(&amp;#39;SIGN_OUT&amp;#39;, {}) sendEvent(&amp;#39;LOG_IN&amp;#39;, { userId: 122 }) sendEvent(&amp;#39;LOG_IN&amp;#39;, {}) sendEvent(&amp;#39;LOG_IN&amp;#39;) 本題 以下のコードで実現可能
type AuthEvent = | { type: &amp;#39;LOG_IN&amp;#39; payload: { userId: string } } | { type: &amp;#39;SIGN_OUT&amp;#39; } const sendEvent = &amp;lt;Type extends AuthEvent[&amp;#39;type&amp;#39;]&amp;gt;( ...args: Extract&amp;lt;AuthEvent, { type: Type }&amp;gt; extends { payload: infer TPayload } ?</description></item></channel></rss>