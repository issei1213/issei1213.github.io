<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Vue.js on TechBlog</title><link>https://issei1213.github.io/tags/vue.js/</link><description>Recent content in Vue.js on TechBlog</description><generator>Hugo -- gohugo.io</generator><language>ja-jp</language><lastBuildDate>Fri, 25 Mar 2022 00:00:00 +0900</lastBuildDate><atom:link href="https://issei1213.github.io/tags/vue.js/index.xml" rel="self" type="application/rss+xml"/><item><title>refとreactive</title><link>https://issei1213.github.io/posts/vue_ref_vs_reactive/</link><pubDate>Fri, 25 Mar 2022 00:00:00 +0900</pubDate><guid>https://issei1213.github.io/posts/vue_ref_vs_reactive/</guid><description>背景 refとreactiveの使い分けがパッとでてこなかったことがあったのでまとめていく。
概要 どの状況で使い分ければいいのか refとreactiveの違い 本題 1.どの状況で使い分ければいいのか refはプリミティブ型に対して使用する。 reactiveはオブジェクト型に対して使用する。
2.refとreactiveの違い ref const boolean = ref(false) // export function ref&amp;lt;boolean&amp;gt;(value: boolean): Ref&amp;lt;boolean&amp;gt; TypeScriptの場合は、引数(初期値)を型推論してくれる。 明示的にしたい型注釈したい場合は、ref&amp;lt;boolean | null&amp;gt;(false)と使用することもできる。 基本的になんでも(オブジェクト、配列、プリミティブ)refで使用ができる。 引数の値がオブジェクトの場合は、Vue内部でreactiveに更新している。更新している負荷を与えてしまうため、オブジェクトの場合は、reactiveを使用したほうがいいと言われている。 ref.valueでデータを格納する Ex)boolean.value = true reactive const user = reactive({ firstName: &amp;#39;太郎&amp;#39;, lastName: &amp;#39;山田&amp;#39;, height: 160, weight: 50 }) // const user: {firstName: string, lastName: string, height: number, weight: number} TypeScriptの場合は、引数(初期値)を型推論してくれる。 型注釈をつけたい場合は、ジェネクリスを使用できる const user = reactive&amp;lt;{ firstName?: string lastName?</description></item><item><title>watchとwatchEffect</title><link>https://issei1213.github.io/posts/vue_watch-and-watcheffect/</link><pubDate>Fri, 18 Mar 2022 10:36:36 +0900</pubDate><guid>https://issei1213.github.io/posts/vue_watch-and-watcheffect/</guid><description>背景 Vue.jsを使用する際にwatchを使う頻度はそこまで多くなく、使う度にドキュメントを確認するので、記事にまとめておく。
概要 Vue3のwatchとwatchEffectの仕様をまとめていく。また、それぞれの違いもまとめる。
本題 watch 説明 指定したデータを監視して、変化があればコールバック関数が実行する。
使い方 単一のデータ監視と複数のデータ監視の2種類の使い方が存在する。
1. 単一のデータを監視する場合 const count = ref(0) // 第一引数に監視したいデータを記載する watch(count, (newCount, prevCount) =&amp;gt; { /* ... */ }) const state = reactive({ count: 0 }) // 第一引数に監視したいデータをコールバック関数で記載する watch(() =&amp;gt; state.count, (newCount, prevCount) =&amp;gt; { /* ... */ } ) 2. 複数のデータを監視する場合 配列を使用することで、複数のデータを監視できる 複数の監視データが同時に変更する時には、コールバック関数は一度して動かないため注意 const firstName = ref(&amp;#39;&amp;#39;) const lastName = ref(&amp;#39;&amp;#39;) // 第一引数を配列にしている watch([firstName, lastName], (newValues, prevValues) =&amp;gt; { console.</description></item></channel></rss>